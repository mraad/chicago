<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:views="com.esri.views.*"
               width="600" height="300"
               close="this_closeHandler(event)">
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.symbols.SimpleMarkerSymbol;
            import com.esri.ags.symbols.Symbol;
            import com.esri.model.AppCollection;
            import com.esri.model.AppField;
            import com.esri.model.Model;

            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.core.FlexGlobals;
            import mx.events.CloseEvent;
            import mx.events.EffectEvent;
            import mx.events.FlexEvent;
            import mx.graphics.IFill;
            import mx.graphics.SolidColor;
            import mx.managers.PopUpManager;

            import spark.utils.DataItem;

            public static function show(appCollection:AppCollection, arrcol:ArrayCollection):void
            {
                const dataGridWindow:DataGridWindow = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, DataGridWindow) as DataGridWindow;
                dataGridWindow.title = appCollection.label;
                dataGridWindow.dataGrid.columns = appCollection.columns;
                dataGridWindow.dataGrid.dataProvider = arrcol;
                dataGridWindow.countLabel.text = arrcol.length + " Record(s)";
                dataGridWindow.dropDownList.dataProvider = new ArrayList(appCollection.fields);
                PopUpManager.centerPopUp(dataGridWindow);
            }

            [Bindable]
            public var pieChartData:Array;

            private const colors:Array = [
                14976769,
                10861646,
                1807833,
                13290142,
                6722480,
                15752743,
                8835556,
                15006112,
                16766226,
                7712768,
                418480,
                15591622,
                13382400,
                13754343,
                5428426,
                12968029,
                15188340,
                16775063,
                12973711,
                12448230,
                10393725,
                15440013,
                9554405,
                9690186,
                16759040,
                10402765,
                38807,
                897730
                ];

            private function this_closeHandler(event:CloseEvent):void
            {
                const arrcol:ArrayCollection = dataGrid.dataProvider as ArrayCollection;
                for each (var feature:Graphic in arrcol.source)
                {
                    Model.instance.markers.removeItemAt(Model.instance.markers.getItemIndex(feature));
                }
                fade.play([ this ]);
            }

            private function fade_effectEndHandler(event:EffectEvent):void
            {
                PopUpManager.removePopUp(this);
            }

            private function tableButton_clickHandler(event:MouseEvent):void
            {
                currentState = "grid";
            }

            private function chartButton_clickHandler(event:MouseEvent):void
            {
                var feature:Graphic;
                var dataItem:DataItem;
                const appField:AppField = dropDownList.selectedItem;
                const arrcol:ArrayCollection = dataGrid.dataProvider as ArrayCollection;
                const dict:Dictionary = new Dictionary();
                for each (feature in arrcol.source)
                {
                    const value:Object = feature.attributes[appField.name];
                    if (value)
                    {
                        const key:String = value.toString();
                        dataItem = dict[key];
                        if (dataItem)
                        {
                            dataItem.value += 1;
                        }
                        else
                        {
                            dataItem = new DataItem();
                            dataItem.label = key;
                            dataItem.value = 1;
                            dict[key] = dataItem;
                        }
                    }
                }
                const arr:Array = [];
                for each (dataItem in dict)
                {
                    const color:Number = colors[arr.length % colors.length];
                    dataItem.symbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 10, color);
                    arr.push(dataItem);
                }
                for each (feature in arrcol.source)
                {
                    const value2:Object = feature.attributes[appField.name];
                    if (value2)
                    {
                        const key2:String = value2.toString();
                        dataItem = dict[key2];
                        if (dataItem)
                        {
                            feature.symbol = dataItem.symbol;
                        }
                    }
                }
                pieChartData = arr;
                currentState = "chart";
            }

            private function pieFunc(data:Object, field:String, index:Number, percentValue:Number):String
            {
                return data.label + ':' + data.value + '\n' + numFormatter.format(percentValue) + "%";
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:Fade id="fade"
                alphaFrom="1.0"
                alphaTo="0.0"
                effectEnd="fade_effectEndHandler(event)"/>
        <s:NumberFormatter id="numFormatter" fractionalDigits="2"/>
    </fx:Declarations>
    <s:states>
        <s:State name="grid"/>
        <s:State name="chart"/>
    </s:states>
    <s:transitions>
        <s:Transition>
            <s:Fade targets="{[gridGroup,chartGroup]}"/>
        </s:Transition>
    </s:transitions>
    <s:VGroup id="gridGroup"
              width="100%" height="100%"
              alpha="0"
              alpha.grid="1"
              gap="5"
              includeIn="grid"
              paddingBottom="5"
              paddingLeft="5"
              paddingRight="5"
              paddingTop="5">
        <views:AppDataGrid id="dataGrid"
                           width="100%" height="100%"/>
        <s:HGroup width="100%" verticalAlign="middle">
            <s:Label id="countLabel"/>
            <s:Spacer width="100%"/>
            <s:Label text="Graph by"/>
            <s:DropDownList id="dropDownList" requireSelection="true"/>
            <s:Button id="chartButton"
                      click="chartButton_clickHandler(event)"
                      label="Show"/>
        </s:HGroup>
    </s:VGroup>
    <s:VGroup id="chartGroup"
              width="100%" height="100%"
              alpha="0"
              alpha.chart="1"
              gap="5"
              includeIn="chart"
              paddingBottom="5"
              paddingLeft="5"
              paddingRight="5"
              paddingTop="5">
        <mx:PieChart id="pieChart"
                     width="100%" height="100%"
                     dataProvider="{pieChartData}">
            <mx:series>
                <mx:PieSeries id="pieSeries"
                              field="value"
                              labelFunction="pieFunc"
                              labelPosition="callout"
                              nameField="label">
                    <mx:filters>
                        <fx:Array/>
                    </mx:filters>
                </mx:PieSeries>
            </mx:series>
        </mx:PieChart>
        <s:HGroup width="100%"
                  horizontalAlign="right"
                  verticalAlign="middle">
            <s:Button id="tableButton"
                      click="tableButton_clickHandler(event)"
                      label="Back"/>
        </s:HGroup>
    </s:VGroup>
</s:TitleWindow>
